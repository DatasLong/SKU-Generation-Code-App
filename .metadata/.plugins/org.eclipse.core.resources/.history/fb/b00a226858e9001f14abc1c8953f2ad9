import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class UniqueStringGeneratorGUI extends JFrame {
    private static final int STRING_LENGTH = 8;
    private static final String CHAR_POOL = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static final char[] REQUIRED_CHARS = {'0', 'O', 'I', '1', 'S', '5'};
    private static final Random random = new Random();

    private JTextField quantityField;
    private JTextField blendingCountryField;
    private JTextField yyField;
    private JTextField targetCountryField;
    private JTextField mmField;
    private JTextField ddField;
    private JTextArea resultArea;

    public UniqueStringGeneratorGUI() {
        setTitle("SKU Generation Application");
        setSize(500, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(6, 2, 10, 10));

        // Input fields
        inputPanel.add(new JLabel("Enter Quantity:"));
        quantityField = new JTextField();
        inputPanel.add(quantityField);

        inputPanel.add(new JLabel("Enter BlendingCountry (1-9 characters, uppercase only):"));
        blendingCountryField = new JTextField();
        inputPanel.add(blendingCountryField);

        inputPanel.add(new JLabel("Enter YY (25 to 99):"));
        yyField = new JTextField();
        inputPanel.add(yyField);

        inputPanel.add(new JLabel("Enter Target Country (1-99):"));
        targetCountryField = new JTextField();
        inputPanel.add(targetCountryField);

        inputPanel.add(new JLabel("Enter MM (1-12):"));
        mmField = new JTextField();
        inputPanel.add(mmField);

        inputPanel.add(new JLabel("Enter DD (1-30):"));
        ddField = new JTextField();
        inputPanel.add(ddField);

        add(inputPanel, BorderLayout.NORTH);

        // Result area
        resultArea = new JTextArea();
        resultArea.setEditable(false);
        add(new JScrollPane(resultArea), BorderLayout.CENTER);

        // Generate button
        JButton generateButton = new JButton("Generate SKU Codes");
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateSKUCodes();
            }
        });

        add(generateButton, BorderLayout.SOUTH);
    }

    private void generateSKUCodes() {
        int quantity;
        try {
            quantity = Integer.parseInt(quantityField.getText().trim());
            if (quantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be a positive number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String blendingCountry = blendingCountryField.getText().trim();
        if (!blendingCountry.matches("^[A-Z]{1,9}$")) {
            JOptionPane.showMessageDialog(this, "Invalid BlendingCountry.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String yy = yyField.getText().trim();
        if (!yy.matches("^[2-9][5-9]$|^9[0-9]$")) {
            JOptionPane.showMessageDialog(this, "Invalid YY.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String targetCountry = targetCountryField.getText().trim();
        if (!targetCountry.matches("^[1-9]$|^[1-9][0-9]$")) {
            JOptionPane.showMessageDialog(this, "Invalid Target Country.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (targetCountry.length() == 1) {
            targetCountry = "0" + targetCountry;
        }

        String mm = mmField.getText().trim();
        if (!mm.matches("^[1-9]$|^1[0-2]$")) {
            JOptionPane.showMessageDialog(this, "Invalid MM.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (mm.length() == 1) {
            mm = "0" + mm;
        }

        String dd = ddField.getText().trim();
        if (!dd.matches("^[1-9]$|^[1-2][0-9]$|^30$")) {
            JOptionPane.showMessageDialog(this, "Invalid DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (dd.length() == 1) {
            dd = "0" + dd;
        }

        // Generate unique SKU codes
        Set<String> uniqueStrings = new HashSet<>();
        while (uniqueStrings.size() < quantity) {
            String randomString = generateRandomString();
            uniqueStrings.add(blendingCountry + yy + targetCountry + mm + randomString + dd);
        }

        // Display results
        resultArea.setText("");
        for (String str : uniqueStrings) {
            resultArea.append(str + "\n");
        }

        // Save to file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\doant\\Downloads\\code_test_1.txt"))) {
            for (String str : uniqueStrings) {
                writer.write(str);
                writer.newLine();
            }
            JOptionPane.showMessageDialog(this, "Strings saved to file successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving to file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static String generateRandomString() {
        StringBuilder sb = new StringBuilder();
        char requiredChar = REQUIRED_CHARS[random.nextInt(REQUIRED_CHARS.length)];
        sb.append(requiredChar);
        while (sb.length() < STRING_LENGTH) {
            char randomChar = CHAR_POOL.charAt(random.nextInt(CHAR_POOL.length()));
            sb.append(randomChar);
        }

        // Shuffle the characters
        for (int i = STRING_LENGTH - 1; i > 0; i--) {
            int swapIndex = random.nextInt(i + 1);
            char temp = sb.charAt(i);
            sb.setCharAt(i, sb.charAt(swapIndex));
            sb.setCharAt(swapIndex, temp);
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            UniqueStringGeneratorGUI gui = new UniqueStringGeneratorGUI();
            gui.setVisible(true);
        });
    }
}
